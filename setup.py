import sys

from setuptools import Command
from setuptools import find_namespace_packages
from setuptools import setup


class ApiDocs(Command):
    """
    A custom command that calls sphinx-apidoc
    see: https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html
    """
    description = 'builds the api documentation using sphinx-apidoc'
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        from sphinx.ext.apidoc import main
        main([
            '--force',  # overwrite existing files
            '--module-first',  # put module documentation before submodule documentation
            '--separate',  # put documentation for each module on its own page
            '-o', './docs/_autosummary',  # where to save the output files
            'msl',  # the path to the Python package to document
        ])


class BuildDocs(Command):
    """
    A custom command that calls sphinx-build
    see: https://www.sphinx-doc.org/en/master/man/sphinx-build.html
    """
    description = 'builds the documentation using sphinx-build'
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        from sphinx.cmd.build import build_main
        build_main([
            '-b', 'html',  # the builder to use, e.g., create a HTML version of the documentation
            '-a',  # generate output for all files
            '-E',  # ignore cached files, forces to re-read all source files from disk
            'docs',  # the source directory where the documentation files are located
            './docs/_build/html',  # where to save the output files
        ])


def read(filename):
    with open(filename) as fp:
        return fp.read()


# auto generate the MANIFEST.in file depending on the distribution that is being built
if 'bdist_wheel' in sys.argv and 'sdist' in sys.argv:
    raise ValueError(
        'cannot specify bdist_wheel and sdist in the same command, '
        'run one option at a time'
    )
elif 'bdist_wheel' in sys.argv or 'install' in sys.argv:
    if sys.platform == 'win32':
        server32_suffix, extn = 'windows.exe', '.dll'
        if 'bdist_wheel' in sys.argv:
            if sys.maxsize > 2 ** 32:
                sys.argv.extend(['--plat-name', 'win_amd64'])
            else:
                sys.argv.extend(['--plat-name', 'win32'])
    elif sys.platform.startswith('linux'):
        server32_suffix, extn = 'linux', '.so'
        if 'bdist_wheel' in sys.argv:
            if sys.maxsize > 2 ** 32:
                sys.argv.extend(['--plat-name', 'manylinux1_x86_64'])
            else:
                sys.argv.extend(['--plat-name', 'manylinux1_i686'])
    elif sys.platform == 'darwin':
        server32_suffix, extn = None, '.dylib'
    else:
        server32_suffix, extn = None, None

    with open('MANIFEST.in', mode='wt') as f:
        f.write('# This file is automatically generated. Do not modify.\n')
        f.write('recursive-include msl/examples/loadlib *.jar *.class\n')
        f.write('include msl/loadlib/py4j-wrapper.jar\n')
        f.write('include msl/examples/loadlib/dotnet_lib32.dll\n')
        f.write('include msl/examples/loadlib/dotnet_lib64.dll\n')
        if server32_suffix is not None:
            f.write(f'recursive-include msl/loadlib server32-{server32_suffix}*\n')
        if extn is not None:
            f.write(f'recursive-include msl/examples/loadlib *{extn}\n')
        f.write('include msl/loadlib/py.typed\n')
elif 'sdist' in sys.argv:
    with open('MANIFEST.in', mode='wt') as f:
        f.write('# This file is automatically generated. Do not modify.\n')
        f.write('recursive-include msl *.cpp *.h *.cs *.f90 *.java *.jar *.class *.so *.dll *.txt *.dylib\n')
        f.write('exclude msl/loadlib/server32-*\n')
        f.write('include msl/loadlib/py.typed\n')

install_requires = []

tests_require = [
    'pytest>=4.4',  # >=4.4 to support the "-p conftest" option
    'pytest-cov',
    'py4j',
    'numpy',  # needed for [doctest] tutorials_cpp_array.rst
    'pythonnet',
    'comtypes;sys_platform=="win32"',
]

docs_require = [
    'sphinx>2',  # >2 required for ReadTheDocs
    'sphinx-rtd-theme>0.5',  # >0.5 required for ReadTheDocs
]

testing = {'test', 'tests', 'pytest'}.intersection(sys.argv)

setup(
    name='msl-loadlib',
    version='1.0.0.dev0',
    author='Measurement Standards Laboratory of New Zealand',
    author_email='info@measurement.govt.nz',
    url='https://github.com/MSLNZ/msl-loadlib',
    description='Load a shared library (and access a 32-bit library from 64-bit Python)',
    long_description=read('README.rst'),
    license='MIT',
    platforms='any',
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Science/Research',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Topic :: Software Development',
        'Topic :: Scientific/Engineering',
    ],
    tests_require=tests_require,
    install_requires=install_requires,
    extras_require={
        'clr': ['pythonnet'],
        'java': ['py4j'],
        'com': ['comtypes'],
        'all': ['pythonnet', 'py4j', 'comtypes'],
        'tests': tests_require,
        'docs': docs_require,
        'dev': tests_require + docs_require,
    },
    cmdclass={'docs': BuildDocs, 'apidocs': ApiDocs},
    packages=find_namespace_packages(include=('msl*',)),
    include_package_data=True,
    entry_points={
        'console_scripts': [
            'freeze32 = msl.loadlib.freeze_server32:_cli',
        ],
    },
)
